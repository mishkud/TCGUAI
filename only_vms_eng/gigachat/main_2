terraform {
  required_providers {
    yandex = {
      source = "yandex-cloud/yandex"
    }
  }
  required_version = ">= 0.13"
}

provider "yandex" {
  zone = "<зона_доступности_по_умолчанию>"
}
# Define required providers versions
terraform {
  required_providers {
    yandex = {
      source  = "yandex-cloud/yandex"
      version = "~> 0.87"
    }
  }
}

variable "ssh_key_path" {
  type        = string
  description = "Path to your SSH private key."
  default     = "~/.ssh/id_rsa"
}

locals {
  ssh_keys = filebase64(var.ssh_key_path)
}

resource "yandex_vpc_network" "common-network" {
  name        = "crm-store-network"
  description = "Common network for both servers"
}

resource "yandex_vpc_subnet" "common-subnet" {
  zone           = "ru-central1-a"
  network_id     = yandex_vpc_network.common-network.id
  v4_cidr_blocks = ["10.130.0.0/24"]
  name           = "crm-store-subnet"
}

resource "yandex_compute_instance_group" "vm-group" {
  count               = 2 # Two instances
  name                = "${count.index == 0 ? "crm-server" : "ecommerce-store"}"
  platform_id         = "standard-v3"
  resources {
    cores  = 2
    memory = 2
  }
  boot_disk {
    initialize_params {
      image_id = data.yandex_compute_image.ubuntu-lts-most-recent.id
      size     = 20
    }
  }
  network_interface {
    subnet_id    = yandex_vpc_subnet.common-subnet.id
    nat         = true
  }
  scheduling_policy {
    preemptible = false
  }
  allow_stopping_for_update = true

  metadata = {
    user-data = <<-EOF
              #cloud-config
              users:
                - name: ubuntu
                  sudo: ALL=(ALL) NOPASSWD:ALL
                  shell: /bin/bash
                  ssh_authorized_keys:
                    - ${local.ssh_keys}
            EOF
  }

  dependencies = [
    yandex_vpc_subnet.common-subnet,
    data.yandex_compute_image.ubuntu-lts-most-recent
  ]
}

data "yandex_compute_image" "ubuntu-lts-most-recent" {
  family = "ubuntu-2204-lts"
  most_recent = true
}

resource "yandex_vpc_security_group" "allow-ssh-and-ping" {
  name        = "allow-ssh-and-ping"
  description = "Allow SSH from anywhere and ICMP ping"

  network_id = yandex_vpc_network.common-network.id

  ingress {
    protocol       = "TCP"
    port           = 22
    v4_cidr_blocks = ["0.0.0.0/0"] # Allow SSH from any IPv4 address
  }

  ingress {
    protocol = "ICMPv4"
    icmp_type = "-1"
    icmp_code = "-1"
    v4_cidr_blocks = ["0.0.0.0/0"] # Allow ICMP ping from any IPv4 address
  }

  egress {
    protocol = "all"
    prefix_len_ipv4 = 0
  }
}

output "public_ips" {
  value = {
    crm_server_ip    = element(yandex_compute_instance_group.vm-group.*.network_interface.0.nat_ip_address, 0)
    ecommerce_store_ip = element(yandex_compute_instance_group.vm-group.*.network_interface.0.nat_ip_address, 1)
  }
}
