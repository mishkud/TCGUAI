terraform {
  required_providers {
    yandex = {
      source = "yandex-cloud/yandex"
    }
  }
  required_version = ">= 0.13"
}

provider "yandex" {
  zone = "<зона_доступности_по_умолчанию>"
}

# ==============================================================================
# VARIABLES
# ==============================================================================

variable "ssh_key_path" {
  description = "Path to SSH public key"
  type        = string
  default     = "~/.ssh/id_rsa.pub"
}

variable "zone" {
  description = "Availability zone"
  type        = string
  default     = "ru-central1-a"
}

# ==============================================================================
# DATA SOURCES
# ==============================================================================

data "yandex_compute_image" "ubuntu" {
  family = "ubuntu-2204-lts"
}

# ==============================================================================
# NETWORK INFRASTRUCTURE
# ==============================================================================

resource "yandex_vpc_network" "main" {
  name = "main-network"
}

resource "yandex_vpc_subnet" "main" {
  name           = "main-subnet"
  zone           = var.zone
  network_id     = yandex_vpc_network.main.id
  v4_cidr_blocks = ["10.0.1.0/24"]
}

# ==============================================================================
# SECURITY GROUPS
# ==============================================================================

resource "yandex_vpc_security_group" "vm_sg" {
  name       = "vm-security-group"
  network_id = yandex_vpc_network.main.id

  egress {
    protocol       = "ANY"
    description    = "Allow all outbound traffic"
    v4_cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    protocol       = "TCP"
    description    = "SSH access"
    v4_cidr_blocks = ["0.0.0.0/0"]
    port           = 22
  }

  ingress {
    protocol       = "TCP"
    description    = "HTTP access"
    v4_cidr_blocks = ["0.0.0.0/0"]
    port           = 80
  }

  ingress {
    protocol       = "TCP"
    description    = "HTTPS access"
    v4_cidr_blocks = ["0.0.0.0/0"]
    port           = 443
  }
}

resource "yandex_vpc_security_group" "mysql_sg" {
  name       = "mysql-security-group"
  network_id = yandex_vpc_network.main.id

  egress {
    protocol       = "ANY"
    description    = "Allow all outbound traffic"
    v4_cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    protocol         = "TCP"
    description      = "MySQL access from VMs"
    security_group_id = yandex_vpc_security_group.vm_sg.id
    port             = 3306
  }

  ingress {
    protocol       = "TCP"
    description    = "MySQL access from subnet"
    v4_cidr_blocks = ["10.0.1.0/24"]
    port           = 3306
  }
}

# ==============================================================================
# VIRTUAL MACHINES
# ==============================================================================

resource "yandex_compute_instance" "crm_server" {
  name     = "crm-server"
  hostname = "crm-server"
  zone     = var.zone

  resources {
    cores  = 2
    memory = 2
  }

  boot_disk {
    initialize_params {
      image_id = data.yandex_compute_image.ubuntu.id
      size     = 20
      type     = "network-hdd"
    }
  }

  network_interface {
    subnet_id          = yandex_vpc_subnet.main.id
    nat                = true
    security_group_ids = [yandex_vpc_security_group.vm_sg.id]
  }

  metadata = {
    ssh-keys = "ubuntu:${file(var.ssh_key_path)}"
  }
}

resource "yandex_compute_instance" "shop_server" {
  name     = "shop-server"
  hostname = "shop-server"
  zone     = var.zone

  resources {
    cores  = 2
    memory = 2
  }

  boot_disk {
    initialize_params {
      image_id = data.yandex_compute_image.ubuntu.id
      size     = 20
      type     = "network-hdd"
    }
  }

  network_interface {
    subnet_id          = yandex_vpc_subnet.main.id
    nat                = true
    security_group_ids = [yandex_vpc_security_group.vm_sg.id]
  }

  metadata = {
    ssh-keys = "ubuntu:${file(var.ssh_key_path)}"
  }
}

# ==============================================================================
# MANAGED MYSQL DATABASE
# ==============================================================================

resource "yandex_mdb_mysql_cluster" "mysql" {
  name        = "mysql-cluster"
  environment = "PRODUCTION"
  network_id  = yandex_vpc_network.main.id
  version     = "8.0"

  resources {
    resource_preset_id = "s2.small"
    disk_type_id       = "network-hdd"
    disk_size          = 20
  }

  host {
    zone      = var.zone
    subnet_id = yandex_vpc_subnet.main.id
  }

  security_group_ids = [yandex_vpc_security_group.mysql_sg.id]
}

resource "yandex_mdb_mysql_database" "app_db" {
  cluster_id = yandex_mdb_mysql_cluster.mysql.id
  name       = "app_database"
}

resource "yandex_mdb_mysql_user" "app_user" {
  cluster_id = yandex_mdb_mysql_cluster.mysql.id
  name       = "app_user"
  password   = "SecurePassword123!"
  
  permission {
    database_name = yandex_mdb_mysql_database.app_db.name
    roles         = ["ALL"]
  }
}

# ==============================================================================
# OUTPUTS
# ==============================================================================

output "crm_server_public_ip" {
  description = "Public IP address of CRM server"
  value       = yandex_compute_instance.crm_server.network_interface.0.nat_ip_address
}

output "shop_server_public_ip" {
  description = "Public IP address of Shop server"
  value       = yandex_compute_instance.shop_server.network_interface.0.nat_ip_address
}

output "mysql_host" {
  description = "MySQL cluster host"
  value       = yandex_mdb_mysql_cluster.mysql.host.0.fqdn
}

output "mysql_database" {
  description = "MySQL database name"
  value       = yandex_mdb_mysql_database.app_db.name
}

output "mysql_user" {
  description = "MySQL user name"
  value       = yandex_mdb_mysql_user.app_user.name
  sensitive   = true
}
