terraform {
  required_providers {
    yandex = {
      source  = "yandex-cloud/yandex"
      version = "~> 0.84"
    }
  }
  required_version = ">= 1.0"
}

# Переменные для настройки
variable "cloud_id" {
  description = "Yandex Cloud ID"
  type        = string
  default     = ""  # ЗАПОЛНИТЕ: ID вашего облака
}

variable "folder_id" {
  description = "Yandex Cloud Folder ID"
  type        = string
  default     = ""  # ЗАПОЛНИТЕ: ID вашей папки
}

variable "zone" {
  description = "Yandex Cloud availability zone"
  type        = string
  default     = "ru-central1-a"
}

variable "ssh_key_path" {
  description = "Path to SSH public key"
  type        = string
  default     = "~/.ssh/id_rsa.pub"  # ИЗМЕНИТЕ при необходимости
}

# Провайдер Yandex Cloud
provider "yandex" {
  # token     = var.yc_token      # Используйте переменную окружения YC_TOKEN
  cloud_id  = var.cloud_id
  folder_id = var.folder_id
  zone      = var.zone
}

# Получение данных об образе Ubuntu
data "yandex_compute_image" "ubuntu" {
  family = "ubuntu-2004-lts"
}

# Создание VPC сети
resource "yandex_vpc_network" "main" {
  name        = "main-network"
  description = "Main network for CRM and eCommerce infrastructure"
}

# Создание подсети
resource "yandex_vpc_subnet" "main" {
  name           = "main-subnet"
  zone           = var.zone
  network_id     = yandex_vpc_network.main.id
  v4_cidr_blocks = ["10.2.0.0/16"]
}

# Группа безопасности для веб-серверов
resource "yandex_vpc_security_group" "web" {
  name        = "web-security-group"
  description = "Security group for web servers"
  network_id  = yandex_vpc_network.main.id

  ingress {
    protocol       = "TCP"
    description    = "HTTP"
    v4_cidr_blocks = ["0.0.0.0/0"]
    port           = 80
  }

  ingress {
    protocol       = "TCP"
    description    = "HTTPS"
    v4_cidr_blocks = ["0.0.0.0/0"]
    port           = 443
  }

  ingress {
    protocol       = "TCP"
    description    = "SSH"
    v4_cidr_blocks = ["0.0.0.0/0"]
    port           = 22
  }

  egress {
    protocol       = "ANY"
    description    = "All outgoing traffic"
    v4_cidr_blocks = ["0.0.0.0/0"]
  }
}

# Группа безопасности для базы данных
resource "yandex_vpc_security_group" "db" {
  name        = "db-security-group"
  description = "Security group for database"
  network_id  = yandex_vpc_network.main.id

  ingress {
    protocol       = "TCP"
    description    = "MySQL"
    v4_cidr_blocks = ["10.2.0.0/16"]
    port           = 3306
  }

  egress {
    protocol       = "ANY"
    description    = "All outgoing traffic"
    v4_cidr_blocks = ["0.0.0.0/0"]
  }
}

# Виртуальная машина для CRM
resource "yandex_compute_instance" "crm_vm" {
  name        = "crm-server"
  platform_id = "standard-v3"
  zone        = var.zone

  resources {
    cores         = 2
    memory        = 4
    core_fraction = 20
  }

  boot_disk {
    initialize_params {
      image_id = data.yandex_compute_image.ubuntu.id
      size     = 20
    }
  }

  network_interface {
    subnet_id          = yandex_vpc_subnet.main.id
    nat                = true
    security_group_ids = [yandex_vpc_security_group.web.id]
  }

  metadata = {
    ssh-keys = "ubuntu:${file(var.ssh_key_path)}"
    user-data = <<-EOF
      #cloud-config
      package_update: true
      packages:
        - nginx
        - mysql-client
        - curl
        - wget
      runcmd:
        - systemctl enable nginx
        - systemctl start nginx
        - echo "<h1>CRM Server</h1><p>Server is ready for CRM installation</p>" > /var/www/html/index.html
    EOF
  }

  labels = {
    environment = "production"
    service     = "crm"
  }
}

# Виртуальная машина для интернет-магазина
resource "yandex_compute_instance" "ecommerce_vm" {
  name        = "ecommerce-server"
  platform_id = "standard-v3"
  zone        = var.zone

  resources {
    cores         = 2
    memory        = 4
    core_fraction = 20
  }

  boot_disk {
    initialize_params {
      image_id = data.yandex_compute_image.ubuntu.id
      size     = 20
    }
  }

  network_interface {
    subnet_id          = yandex_vpc_subnet.main.id
    nat                = true
    security_group_ids = [yandex_vpc_security_group.web.id]
  }

  metadata = {
    ssh-keys = "ubuntu:${file(var.ssh_key_path)}"
    user-data = <<-EOF
      #cloud-config
      package_update: true
      packages:
        - nginx
        - mysql-client
        - curl
        - wget
        - php-fpm
        - php-mysql
      runcmd:
        - systemctl enable nginx
        - systemctl start nginx
        - systemctl enable php7.4-fpm
        - systemctl start php7.4-fpm
        - echo "<h1>E-Commerce Server</h1><p>Server is ready for online store installation</p>" > /var/www/html/index.html
    EOF
  }

  labels = {
    environment = "production"
    service     = "ecommerce"
  }
}

# Managed MySQL кластер
resource "yandex_mdb_mysql_cluster" "mysql" {
  name               = "mysql-cluster"
  environment        = "PRODUCTION"
  network_id         = yandex_vpc_network.main.id
  version            = "8.0"
  deletion_protection = false

  resources {
    resource_preset_id = "s2.micro"
    disk_type_id       = "network-ssd"
    disk_size          = 20
  }

  database {
    name = "crm_db"
  }

  database {
    name = "ecommerce_db"
  }

  user {
    name     = "admin"
    password = "StrongPassword123!"  # ИЗМЕНИТЕ на более безопасный пароль
    authentication_plugin = "MYSQL_NATIVE_PASSWORD"
    permission {
      database_name = "crm_db"
      roles         = ["ALL"]
    }
    permission {
      database_name = "ecommerce_db"
      roles         = ["ALL"]
    }
  }

  host {
    zone             = var.zone
    subnet_id        = yandex_vpc_subnet.main.id
    assign_public_ip = false
  }

  security_group_ids = [yandex_vpc_security_group.db.id]

  backup_window_start {
    hours   = 3
    minutes = 0
  }
}

# Вывод важной информации
output "crm_vm_external_ip" {
  description = "External IP address of CRM VM"
  value       = yandex_compute_instance.crm_vm.network_interface.0.nat_ip_address
}

output "ecommerce_vm_external_ip" {
  description = "External IP address of E-commerce VM"
  value       = yandex_compute_instance.ecommerce_vm.network_interface.0.nat_ip_address
}

output "mysql_cluster_id" {
  description = "MySQL cluster ID"
  value       = yandex_mdb_mysql_cluster.mysql.id
}

output "mysql_cluster_fqdn" {
  description = "MySQL cluster FQDN"
  value       = yandex_mdb_mysql_cluster.mysql.host.0.fqdn
}

output "ssh_connection_crm" {
  description = "SSH connection command for CRM server"
  value       = "ssh ubuntu@${yandex_compute_instance.crm_vm.network_interface.0.nat_ip_address}"
}

output "ssh_connection_ecommerce" {
  description = "SSH connection command for E-commerce server"
  value       = "ssh ubuntu@${yandex_compute_instance.ecommerce_vm.network_interface.0.nat_ip_address}"
}
