terraform {
  required_providers {
    yandex = {
      source = "yandex-cloud/yandex"
      version = "~> 0.84.0"
    }
  }
  required_version = ">= 0.13"
}

# Здесь укажите ваши учетные данные Yandex Cloud
provider "yandex" {
  token     = var.yc_token       # OAuth-токен
  cloud_id  = var.yc_cloud_id    # Идентификатор облака
  folder_id = var.yc_folder_id   # Идентификатор каталога
  zone      = var.yc_zone        # Зона доступности по умолчанию
}

# Определение переменных
variable "yc_token" {
  description = "Yandex Cloud OAuth token"
  type        = string
  sensitive   = true
}

variable "yc_cloud_id" {
  description = "Yandex Cloud ID"
  type        = string
}

variable "yc_folder_id" {
  description = "Yandex Cloud Folder ID"
  type        = string
}

variable "yc_zone" {
  description = "Yandex Cloud Zone"
  type        = string
  default     = "ru-central1-a"
}

variable "db_password" {
  description = "Password for MySQL database"
  type        = string
  sensitive   = true
}

variable "ssh_public_key" {
  description = "SSH public key for VM instances"
  type        = string
}

# Создаем VPC сеть и подсеть
resource "yandex_vpc_network" "network" {
  name = "app-network"
}

resource "yandex_vpc_subnet" "subnet" {
  name           = "app-subnet"
  zone           = var.yc_zone
  network_id     = yandex_vpc_network.network.id
  v4_cidr_blocks = ["10.2.0.0/16"]
}

# Группа безопасности для виртуальных машин
resource "yandex_vpc_security_group" "vm_sg" {
  name        = "vm-security-group"
  network_id  = yandex_vpc_network.network.id

  # Разрешаем входящий SSH
  ingress {
    protocol       = "TCP"
    description    = "SSH access"
    v4_cidr_blocks = ["0.0.0.0/0"]
    port           = 22
  }

  # Разрешаем HTTP
  ingress {
    protocol       = "TCP"
    description    = "HTTP access"
    v4_cidr_blocks = ["0.0.0.0/0"]
    port           = 80
  }

  # Разрешаем HTTPS
  ingress {
    protocol       = "TCP"
    description    = "HTTPS access"
    v4_cidr_blocks = ["0.0.0.0/0"]
    port           = 443
  }

  # Разрешаем исходящий трафик
  egress {
    protocol       = "ANY"
    description    = "Allow outgoing traffic"
    v4_cidr_blocks = ["0.0.0.0/0"]
    from_port      = 0
    to_port        = 65535
  }
}

# Группа безопасности для MySQL
resource "yandex_vpc_security_group" "mysql_sg" {
  name        = "mysql-security-group"
  network_id  = yandex_vpc_network.network.id

  # Разрешаем MySQL с наших ВМ
  ingress {
    protocol          = "TCP"
    description       = "MySQL access from VMs"
    security_group_id = yandex_vpc_security_group.vm_sg.id
    port              = 3306
  }

  # Разрешаем исходящий трафик
  egress {
    protocol       = "ANY"
    description    = "Allow outgoing traffic"
    v4_cidr_blocks = ["0.0.0.0/0"]
    from_port      = 0
    to_port        = 65535
  }
}

# ВМ для CRM
resource "yandex_compute_instance" "crm_vm" {
  name        = "crm-vm"
  platform_id = "standard-v1"
  zone        = var.yc_zone

  resources {
    cores  = 2
    memory = 4
  }

  boot_disk {
    initialize_params {
      image_id = "fd8mfc6omiki5govl68h" # Ubuntu 20.04 LTS
      size     = 20
    }
  }

  network_interface {
    subnet_id          = yandex_vpc_subnet.subnet.id
    nat                = true
    security_group_ids = [yandex_vpc_security_group.vm_sg.id]
  }

  metadata = {
    ssh-keys = "ubuntu:${var.ssh_public_key}"
  }
}

# ВМ для интернет-магазина
resource "yandex_compute_instance" "shop_vm" {
  name        = "shop-vm"
  platform_id = "standard-v1"
  zone        = var.yc_zone

  resources {
    cores  = 2
    memory = 4
  }

  boot_disk {
    initialize_params {
      image_id = "fd8mfc6omiki5govl68h" # Ubuntu 20.04 LTS
      size     = 20
    }
  }

  network_interface {
    subnet_id          = yandex_vpc_subnet.subnet.id
    nat                = true
    security_group_ids = [yandex_vpc_security_group.vm_sg.id]
  }

  metadata = {
    ssh-keys = "ubuntu:${var.ssh_public_key}"
  }
}

# Кластер MySQL
resource "yandex_mdb_mysql_cluster" "mysql_cluster" {
  name        = "mysql-cluster"
  environment = "PRODUCTION"
  network_id  = yandex_vpc_network.network.id
  version     = "8.0"
  
  security_group_ids = [yandex_vpc_security_group.mysql_sg.id]

  resources {
    resource_preset_id = "b1.medium" # 2 vCPU, 8 GB RAM
    disk_type_id       = "network-ssd"
    disk_size          = 20
  }

  host {
    zone      = var.yc_zone
    subnet_id = yandex_vpc_subnet.subnet.id
  }
}

# База данных и пользователь MySQL
resource "yandex_mdb_mysql_database" "app_db" {
  cluster_id = yandex_mdb_mysql_cluster.mysql_cluster.id
  name       = "app_database"
}

resource "yandex_mdb_mysql_user" "app_user" {
  cluster_id = yandex_mdb_mysql_cluster.mysql_cluster.id
  name       = "app_user"
  password   = var.db_password
  
  permission {
    database_name = yandex_mdb_mysql_database.app_db.name
    roles         = ["ALL"]
  }
}

# Выводим публичные IP адреса виртуальных машин
output "crm_vm_public_ip" {
  value = yandex_compute_instance.crm_vm.network_interface.0.nat_ip_address
}

output "shop_vm_public_ip" {
  value = yandex_compute_instance.shop_vm.network_interface.0.nat_ip_address
}

# Выводим информацию о подключении к MySQL
output "mysql_host" {
  value = yandex_mdb_mysql_cluster.mysql_cluster.host[0].fqdn
}

output "mysql_user" {
  value = yandex_mdb_mysql_user.app_user.name
}

output "mysql_database" {
  value = yandex_mdb_mysql_database.app_db.name
}
