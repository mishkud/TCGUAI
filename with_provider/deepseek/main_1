terraform {
  required_providers {
    yandex = {
      source = "yandex-cloud/yandex"
    }
  }
}

provider "yandex" {
  zone = "ru-central1-a"
}

# Переменные, которые пользователь может изменить
variable "cloud_id" {
  description = "Yandex Cloud ID"
  type        = string
}

variable "folder_id" {
  description = "Yandex Cloud Folder ID"
  type        = string
}

variable "sa_key_file" {
  description = "Path to service account key file"
  type        = string
  default     = "key.json"
}

locals {
  vm_username      = "admin"
  vm_ssh_key_path  = "~/.ssh/id_rsa.pub"
}

# Настройка провайдера с учетными данными
provider "yandex" {
  cloud_id                 = var.cloud_id
  folder_id                = var.folder_id
  service_account_key_file = var.sa_key_file
  zone                     = "ru-central1-a"
}

# Сеть и подсеть
resource "yandex_vpc_network" "network" {
  name = "yc-network"
}

resource "yandex_vpc_subnet" "subnet" {
  name           = "yc-subnet"
  zone           = "ru-central1-a"
  network_id     = yandex_vpc_network.network.id
  v4_cidr_blocks = ["192.168.10.0/24"]
}

# ВМ для CRM
resource "yandex_compute_instance" "crm_vm" {
  name        = "crm-vm"
  platform_id = "standard-v3"
  zone        = "ru-central1-a"

  resources {
    cores  = 2
    memory = 4
  }

  boot_disk {
    initialize_params {
      image_id = "fd827b91d99psvq5fjit" # Ubuntu 20.04 LTS
      size     = 20
    }
  }

  network_interface {
    subnet_id = yandex_vpc_subnet.subnet.id
    nat       = true
  }

  metadata = {
    ssh-keys = "${local.vm_username}:${file(local.vm_ssh_key_path)}"
  }
}

# ВМ для интернет-магазина
resource "yandex_compute_instance" "shop_vm" {
  name        = "shop-vm"
  platform_id = "standard-v3"
  zone        = "ru-central1-a"

  resources {
    cores  = 2
    memory = 4
  }

  boot_disk {
    initialize_params {
      image_id = "fd827b91d99psvq5fjit" # Ubuntu 20.04 LTS
      size     = 20
    }
  }

  network_interface {
    subnet_id = yandex_vpc_subnet.subnet.id
    nat       = true
  }

  metadata = {
    ssh-keys = "${local.vm_username}:${file(local.vm_ssh_key_path)}"
  }
}

# Managed MySQL
resource "yandex_mdb_mysql_cluster" "mysql" {
  name        = "yc-mysql"
  environment = "PRODUCTION"
  network_id  = yandex_vpc_network.network.id

  resources {
    resource_preset_id = "s2.micro"
    disk_type_id       = "network-ssd"
    disk_size          = 16
  }

  mysql_config = {
    sql_mode                      = "ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION"
    innodb_print_all_deadlocks    = true
  }

  host {
    zone      = "ru-central1-a"
    subnet_id = yandex_vpc_subnet.subnet.id
  }
}

output "crm_vm_public_ip" {
  value = yandex_compute_instance.crm_vm.network_interface.0.nat_ip_address
}

output "shop_vm_public_ip" {
  value = yandex_compute_instance.shop_vm.network_interface.0.nat_ip_address
}

output "mysql_host" {
  value = yandex_mdb_mysql_cluster.mysql.host.0.fqdn
}
